{"version":3,"file":"vectorstores.d.cts","names":["Collection","Document","MongoDBDocument","MaxMarginalRelevanceSearchOptions","VectorStore","EmbeddingsInterface","AsyncCallerParams","MongoDBAtlasVectorSearchLibArgs","MongoDBAtlasFilter","MongoDBAtlasVectorSearch","Promise"],"sources":["../src/vectorstores.d.ts"],"sourcesContent":["import { type Collection, type Document as MongoDBDocument } from \"mongodb\";\nimport { MaxMarginalRelevanceSearchOptions, VectorStore } from \"@langchain/core/vectorstores\";\nimport type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { Document } from \"@langchain/core/documents\";\nimport { AsyncCallerParams } from \"@langchain/core/utils/async_caller\";\n/**\n * Type that defines the arguments required to initialize the\n * MongoDBAtlasVectorSearch class. It includes the MongoDB collection,\n * index name, text key, embedding key, primary key, and overwrite flag.\n *\n * @param collection MongoDB collection to store the vectors.\n * @param indexName A Collections Index Name.\n * @param textKey Corresponds to the plaintext of 'pageContent'.\n * @param embeddingKey Key to store the embedding under.\n * @param primaryKey The Key to use for upserting documents.\n */\nexport interface MongoDBAtlasVectorSearchLibArgs extends AsyncCallerParams {\n    readonly collection: Collection<MongoDBDocument>;\n    readonly indexName?: string;\n    readonly textKey?: string;\n    readonly embeddingKey?: string;\n    readonly primaryKey?: string;\n}\n/**\n * Type that defines the filter used in the\n * similaritySearchVectorWithScore and maxMarginalRelevanceSearch methods.\n * It includes pre-filter, post-filter pipeline, and a flag to include\n * embeddings.\n */\ntype MongoDBAtlasFilter = {\n    preFilter?: MongoDBDocument;\n    postFilterPipeline?: MongoDBDocument[];\n    includeEmbeddings?: boolean;\n} & MongoDBDocument;\n/**\n * Class that is a wrapper around MongoDB Atlas Vector Search. It is used\n * to store embeddings in MongoDB documents, create a vector search index,\n * and perform K-Nearest Neighbors (KNN) search with an approximate\n * nearest neighbor algorithm.\n */\nexport declare class MongoDBAtlasVectorSearch extends VectorStore {\n    FilterType: MongoDBAtlasFilter;\n    private readonly collection;\n    private readonly indexName;\n    private readonly textKey;\n    private readonly embeddingKey;\n    private readonly primaryKey;\n    private caller;\n    _vectorstoreType(): string;\n    constructor(embeddings: EmbeddingsInterface, args: MongoDBAtlasVectorSearchLibArgs);\n    /**\n     * Method to add vectors and their corresponding documents to the MongoDB\n     * collection.\n     * @param vectors Vectors to be added.\n     * @param documents Corresponding documents to be added.\n     * @returns Promise that resolves when the vectors and documents have been added.\n     */\n    addVectors(vectors: number[][], documents: Document[], options?: {\n        ids?: string[];\n    }): Promise<any[]>;\n    /**\n     * Method to add documents to the MongoDB collection. It first converts\n     * the documents to vectors using the embeddings and then calls the\n     * addVectors method.\n     * @param documents Documents to be added.\n     * @returns Promise that resolves when the documents have been added.\n     */\n    addDocuments(documents: Document[], options?: {\n        ids?: string[];\n    }): Promise<any[]>;\n    /**\n     * Method that performs a similarity search on the vectors stored in the\n     * MongoDB collection. It returns a list of documents and their\n     * corresponding similarity scores.\n     * @param query Query vector for the similarity search.\n     * @param k Number of nearest neighbors to return.\n     * @param filter Optional filter to be applied.\n     * @returns Promise that resolves to a list of documents and their corresponding similarity scores.\n     */\n    similaritySearchVectorWithScore(query: number[], k: number, filter?: MongoDBAtlasFilter): Promise<[Document, number][]>;\n    /**\n     * Return documents selected using the maximal marginal relevance.\n     * Maximal marginal relevance optimizes for similarity to the query AND diversity\n     * among selected documents.\n     *\n     * @param {string} query - Text to look up documents similar to.\n     * @param {number} options.k - Number of documents to return.\n     * @param {number} options.fetchK=20- Number of documents to fetch before passing to the MMR algorithm.\n     * @param {number} options.lambda=0.5 - Number between 0 and 1 that determines the degree of diversity among the results,\n     *                 where 0 corresponds to maximum diversity and 1 to minimum diversity.\n     * @param {MongoDBAtlasFilter} options.filter - Optional Atlas Search operator to pre-filter on document fields\n     *                                      or post-filter following the knnBeta search.\n     *\n     * @returns {Promise<Document[]>} - List of documents selected by maximal marginal relevance.\n     */\n    maxMarginalRelevanceSearch(query: string, options: MaxMarginalRelevanceSearchOptions<this[\"FilterType\"]>): Promise<Document[]>;\n    /**\n     * Delete documents from the collection\n     * @param ids - An array of document IDs to be deleted from the collection.\n     *\n     * @returns - A promise that resolves when all documents deleted\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    delete(params: {\n        ids: any[];\n    }): Promise<void>;\n    /**\n     * Static method to create an instance of MongoDBAtlasVectorSearch from a\n     * list of texts. It first converts the texts to vectors and then adds\n     * them to the MongoDB collection.\n     * @param texts List of texts to be converted to vectors.\n     * @param metadatas Metadata for the texts.\n     * @param embeddings Embeddings to be used for conversion.\n     * @param dbConfig Database configuration for MongoDB Atlas.\n     * @returns Promise that resolves to a new instance of MongoDBAtlasVectorSearch.\n     */\n    static fromTexts(texts: string[], metadatas: object[] | object, embeddings: EmbeddingsInterface, dbConfig: MongoDBAtlasVectorSearchLibArgs & {\n        ids?: string[];\n    }): Promise<MongoDBAtlasVectorSearch>;\n    /**\n     * Static method to create an instance of MongoDBAtlasVectorSearch from a\n     * list of documents. It first converts the documents to vectors and then\n     * adds them to the MongoDB collection.\n     * @param docs List of documents to be converted to vectors.\n     * @param embeddings Embeddings to be used for conversion.\n     * @param dbConfig Database configuration for MongoDB Atlas.\n     * @returns Promise that resolves to a new instance of MongoDBAtlasVectorSearch.\n     */\n    static fromDocuments(docs: Document[], embeddings: EmbeddingsInterface, dbConfig: MongoDBAtlasVectorSearchLibArgs & {\n        ids?: string[];\n    }): Promise<MongoDBAtlasVectorSearch>;\n    /**\n     * Static method to fix the precision of the array that ensures that\n     * every number in this array is always float when casted to other types.\n     * This is needed since MongoDB Atlas Vector Search does not cast integer\n     * inside vector search to float automatically.\n     * This method shall introduce a hint of error but should be safe to use\n     * since introduced error is very small, only applies to integer numbers\n     * returned by embeddings, and most embeddings shall not have precision\n     * as high as 15 decimal places.\n     * @param array Array of number to be fixed.\n     * @returns\n     */\n    static fixArrayPrecision(array: number[]): number[];\n}\nexport {};\n"],"mappings":";;;;;;;;;;AAgBA;;;;;AAA0E;AAMzE;;;AASwBE,UAfRK,+BAAAA,SAAwCD,iBAehCJ,CAAAA;EAAe,SAEpCA,UAAAA,EAhBqBF,UAgBrBE,CAhBgCA,QAgBhCA,CAAAA;EAAe,SAAA,SAAA,CAAA,EAAA,MAAA;EAOEO,SAAAA,OAAAA,CAAAA,EAAAA,MAAAA;EAAwB,SAAA,YAAA,CAAA,EAAA,MAAA;EAAA,SAC7BD,UAAAA,CAAAA,EAAAA,MAAAA;;;;;;;;KAZXA,kBAAAA,GAkDkGP;EAAQ,SAAjBS,CAAAA,EAjD9ER,QAiD8EQ;EAAO,kBAgB9CP,CAAAA,EAhE9BD,QAgE8BC,EAAAA;EAAiC,iBAA+BF,CAAAA,EAAAA,OAAAA;CAAQ,GA9D3HC,QA8D2GQ;;;;;;;AAiCxDL,cAxFlCI,wBAAAA,SAAiCL,WAAAA,CAwFCC;EAAmB,UAAYE,EAvFtEC,kBAuFsED;EAA+B,iBAErGE,UAAAA;EAAwB,iBAAhCC,SAAAA;EAAO,iBA1FuCN,OAAAA;EAAW,iBAAA,YAAA;;;;0BASrCC,2BAA2BE;;;;;;;;6CAQRN;;MAEvCS;;;;;;;;0BAQoBT;;MAEpBS;;;;;;;;;;uEAUiEF,qBAAqBE,SAAST;;;;;;;;;;;;;;;;qDAgBhDE,wDAAwDO,QAAQT;;;;;;;;;;MAU/GS;;;;;;;;;;;8EAWwEL,+BAA+BE;;MAEvGG,QAAQD;;;;;;;;;;6BAUeR,0BAAwBI,+BAA+BE;;MAE9EG,QAAQD"}