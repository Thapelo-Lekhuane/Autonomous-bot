{"version":3,"file":"index.d.cts","names":["MongoClient","Db","MongoDatabase","RunnableConfig","BaseCheckpointSaver","Checkpoint","CheckpointListOptions","CheckpointTuple","SerializerProtocol","PendingWrite","CheckpointMetadata","MongoDBSaverParams","MongoDBSaver","client","dbName","checkpointCollectionName","checkpointWritesCollectionName","Promise","AsyncGenerator"],"sources":["../src/index.d.ts"],"sourcesContent":["import { type MongoClient, type Db as MongoDatabase } from \"mongodb\";\nimport type { RunnableConfig } from \"@langchain/core/runnables\";\nimport { BaseCheckpointSaver, type Checkpoint, type CheckpointListOptions, type CheckpointTuple, type SerializerProtocol, type PendingWrite, type CheckpointMetadata } from \"@langchain/langgraph-checkpoint\";\nexport type MongoDBSaverParams = {\n    client: MongoClient;\n    dbName?: string;\n    checkpointCollectionName?: string;\n    checkpointWritesCollectionName?: string;\n};\n/**\n * A LangGraph checkpoint saver backed by a MongoDB database.\n */\nexport declare class MongoDBSaver extends BaseCheckpointSaver {\n    protected client: MongoClient;\n    protected db: MongoDatabase;\n    checkpointCollectionName: string;\n    checkpointWritesCollectionName: string;\n    constructor({ client, dbName, checkpointCollectionName, checkpointWritesCollectionName }: MongoDBSaverParams, serde?: SerializerProtocol);\n    /**\n     * Retrieves a checkpoint from the MongoDB database based on the\n     * provided config. If the config contains a \"checkpoint_id\" key, the checkpoint with\n     * the matching thread ID and checkpoint ID is retrieved. Otherwise, the latest checkpoint\n     * for the given thread ID is retrieved.\n     */\n    getTuple(config: RunnableConfig): Promise<CheckpointTuple | undefined>;\n    /**\n     * Retrieve a list of checkpoint tuples from the MongoDB database based\n     * on the provided config. The checkpoints are ordered by checkpoint ID\n     * in descending order (newest first).\n     */\n    list(config: RunnableConfig, options?: CheckpointListOptions): AsyncGenerator<CheckpointTuple>;\n    /**\n     * Saves a checkpoint to the MongoDB database. The checkpoint is associated\n     * with the provided config and its parent config (if any).\n     */\n    put(config: RunnableConfig, checkpoint: Checkpoint, metadata: CheckpointMetadata): Promise<RunnableConfig>;\n    /**\n     * Saves intermediate writes associated with a checkpoint to the MongoDB database.\n     */\n    putWrites(config: RunnableConfig, writes: PendingWrite[], taskId: string): Promise<void>;\n    deleteThread(threadId: string): Promise<void>;\n}\n"],"mappings":";;;;;KAGYW,kBAAAA;UACAX;EADAW,MAAAA,CAAAA,EAAAA,MAAAA;EASSC,wBAAY,CAAA,EAAA,MAAA;EAAA,8BAAA,CAAA,EAAA,MAAA;;;;;AAKCG,cALbH,YAAAA,SAAqBR,mBAAAA,CAKRW;YAA0BC,MAAAA,EAJtChB,WAIsCgB;YAAkCL,EAAAA,EAH5ET,EAG4ES;0BAA4BH,EAAAA,MAAAA;gCAOrGL,EAAAA,MAAAA;aAAyBI,CAAAA;IAAAA,MAAAA;IAAAA,MAAAA;IAAAA,wBAAAA;IAAAA;EAAAA,CAAAA,EAPgDI,kBAOhDJ,EAAAA,KAAAA,CAAAA,EAP4EC,kBAO5ED;;;;;;;UAWFF,CAAAA,MAAAA,EAXvBF,cAWuBE,CAAAA,EAXNY,OAWMZ,CAXEE,eAWFF,GAAAA,SAAAA,CAAAA;;;;;;MAImCY,CAAAA,MAAAA,EAT9Dd,cAS8Dc,EAAAA,OAAAA,CAAAA,EATpCX,qBASoCW,CAAAA,EATZC,cASYD,CATGV,eASHU,CAAAA;;;;;cAJ/Dd,4BAA4BE,sBAAsBK,qBAAqBO,QAAQd;;;;oBAIzEA,wBAAwBM,iCAAiCQ;kCAC3CA"}