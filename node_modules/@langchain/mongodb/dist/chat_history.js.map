{"version":3,"file":"chat_history.js","names":["message: BaseMessage"],"sources":["../src/chat_history.ts"],"sourcesContent":["import {\n  Collection,\n  Document as MongoDBDocument,\n  type PushOperator,\n} from \"mongodb\";\nimport { BaseListChatMessageHistory } from \"@langchain/core/chat_history\";\nimport {\n  BaseMessage,\n  StoredMessage,\n  mapChatMessagesToStoredMessages,\n  mapStoredMessagesToChatMessages,\n} from \"@langchain/core/messages\";\n\nexport interface MongoDBChatMessageHistoryInput {\n  collection: Collection<MongoDBDocument>;\n  sessionId: string;\n}\n\n/**\n * @example\n * ```typescript\n * const chatHistory = new MongoDBChatMessageHistory({\n *   collection: myCollection,\n *   sessionId: 'unique-session-id',\n * });\n * const messages = await chatHistory.getMessages();\n * await chatHistory.clear();\n * ```\n */\nexport class MongoDBChatMessageHistory extends BaseListChatMessageHistory {\n  lc_namespace = [\"langchain\", \"stores\", \"message\", \"mongodb\"];\n\n  private collection: Collection<MongoDBDocument>;\n\n  private sessionId: string;\n\n  private idKey = \"sessionId\";\n\n  constructor({ collection, sessionId }: MongoDBChatMessageHistoryInput) {\n    super();\n    this.collection = collection;\n    this.sessionId = sessionId;\n    this.collection.db.client.appendMetadata({\n      name: \"langchainjs_chat_history\",\n    });\n  }\n\n  async getMessages(): Promise<BaseMessage[]> {\n    const document = await this.collection.findOne({\n      [this.idKey]: this.sessionId,\n    });\n    const messages = document?.messages || [];\n    return mapStoredMessagesToChatMessages(messages);\n  }\n\n  async addMessage(message: BaseMessage): Promise<void> {\n    const messages = mapChatMessagesToStoredMessages([message]);\n    await this.collection.updateOne(\n      { [this.idKey]: this.sessionId },\n      {\n        $push: { messages: { $each: messages } } as PushOperator<{\n          messages: StoredMessage[];\n        }>,\n      },\n      { upsert: true }\n    );\n  }\n\n  async clear(): Promise<void> {\n    await this.collection.deleteOne({ [this.idKey]: this.sessionId });\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;AA6BA,IAAa,4BAAb,cAA+C,2BAA2B;CACxE,eAAe;EAAC;EAAa;EAAU;EAAW;CAAU;CAE5D,AAAQ;CAER,AAAQ;CAER,AAAQ,QAAQ;CAEhB,YAAY,EAAE,YAAY,WAA2C,EAAE;EACrE,OAAO;EACP,KAAK,aAAa;EAClB,KAAK,YAAY;EACjB,KAAK,WAAW,GAAG,OAAO,eAAe,EACvC,MAAM,2BACP,EAAC;CACH;CAED,MAAM,cAAsC;EAC1C,MAAM,WAAW,MAAM,KAAK,WAAW,QAAQ,GAC5C,KAAK,QAAQ,KAAK,UACpB,EAAC;EACF,MAAM,WAAW,UAAU,YAAY,CAAE;AACzC,SAAO,gCAAgC,SAAS;CACjD;CAED,MAAM,WAAWA,SAAqC;EACpD,MAAM,WAAW,gCAAgC,CAAC,OAAQ,EAAC;EAC3D,MAAM,KAAK,WAAW,UACpB,GAAG,KAAK,QAAQ,KAAK,UAAW,GAChC,EACE,OAAO,EAAE,UAAU,EAAE,OAAO,SAAU,EAAE,EAGzC,GACD,EAAE,QAAQ,KAAM,EACjB;CACF;CAED,MAAM,QAAuB;EAC3B,MAAM,KAAK,WAAW,UAAU,GAAG,KAAK,QAAQ,KAAK,UAAW,EAAC;CAClE;AACF"}