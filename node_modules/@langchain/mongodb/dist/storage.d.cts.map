{"version":3,"file":"storage.d.cts","names":["BaseStore","Collection","Document","MongoDocument","MongoDBStoreInput","MongoDBStore","Uint8Array","ArrayBufferLike","Promise","AsyncGenerator"],"sources":["../src/storage.d.ts"],"sourcesContent":["import { BaseStore } from \"@langchain/core/stores\";\nimport { Collection, Document as MongoDocument } from \"mongodb\";\n/**\n * Type definition for the input parameters required to initialize an\n * instance of the MongoDBStoreInput class.\n */\nexport interface MongoDBStoreInput {\n    collection: Collection<MongoDocument>;\n    /**\n     * The amount of keys to retrieve per batch when yielding keys.\n     * @default 1000\n     */\n    yieldKeysScanBatchSize?: number;\n    /**\n     * The namespace to use for the keys in the database.\n     */\n    namespace?: string;\n    /**\n     * The primary key to use for the database.\n     * @default \"_id\"\n     */\n    primaryKey?: string;\n}\n/**\n * Class that extends the BaseStore class to interact with a MongoDB\n * database. It provides methods for getting, setting, and deleting data,\n * as well as yielding keys from the database.\n * @example\n * ```typescript\n * const client = new MongoClient(process.env.MONGODB_ATLAS_URI);\n * const collection = client.db(\"dbName\").collection(\"collectionName\");\n\n * const store = new MongoDBStore({\n *   collection,\n * });\n *\n * const docs = [\n *   [uuidv4(), \"Dogs are tough.\"],\n *   [uuidv4(), \"Cats are tough.\"],\n * ];\n * const encoder = new TextEncoder();\n * const docsAsKVPairs: Array<[string, Uint8Array]> = docs.map(\n *   (doc) => [doc[0], encoder.encode(doc[1])]\n * );\n * await store.mset(docsAsKVPairs);\n * ```\n */\nexport declare class MongoDBStore extends BaseStore<string, Uint8Array> {\n    lc_namespace: string[];\n    collection: Collection<MongoDocument>;\n    protected namespace?: string;\n    protected yieldKeysScanBatchSize: number;\n    primaryKey: string;\n    constructor(fields: MongoDBStoreInput);\n    _getPrefixedKey(key: string): string;\n    _getDeprefixedKey(key: string): string;\n    /**\n     * Gets multiple keys from the MongoDB database.\n     * @param keys Array of keys to be retrieved.\n     * @returns An array of retrieved values.\n     */\n    mget(keys: string[]): Promise<(Uint8Array<ArrayBufferLike> | undefined)[]>;\n    /**\n     * Sets multiple keys in the MongoDB database.\n     * @param keyValuePairs Array of key-value pairs to be set.\n     * @returns Promise that resolves when all keys have been set.\n     */\n    mset(keyValuePairs: [string, Uint8Array][]): Promise<void>;\n    /**\n     * Deletes multiple keys from the MongoDB database.\n     * @param keys Array of keys to be deleted.\n     * @returns Promise that resolves when all keys have been deleted.\n     */\n    mdelete(keys: string[]): Promise<void>;\n    /**\n     * Yields keys from the MongoDB database.\n     * @param prefix Optional prefix to filter the keys. A wildcard (*) is always appended to the end.\n     * @returns An AsyncGenerator that yields keys from the MongoDB database.\n     */\n    yieldKeys(prefix?: string): AsyncGenerator<string>;\n}\n"],"mappings":";;;;;;;AAMA;;AAC2BG,UADVC,iBAAAA,CACUD;EAAa,UAAxBF,EAAAA,UAAAA,CAAWE,QAAXF,CAAAA;EAAU;AAwC1B;;;EAAsE,sBAE3CE,CAAAA,EAAAA,MAAAA;EAAa;;;EAYqB,SAA1BG,CAAAA,EAAAA,MAAAA;EAAU;;;;EAYT,UAMJG,CAAAA,EAAAA,MAAAA;;AAhCmB;;;;;;;;;;;;;;;;;;;;;;;;cAA9BJ,YAAAA,SAAqBL,kBAAkBM;;cAE5CL,WAAWE;;;;sBAIHC;;;;;;;;wBAQEI,SAASF,WAAWC;;;;;;+BAMbD,gBAAgBE;;;;;;2BAMpBA;;;;;;8BAMGC"}